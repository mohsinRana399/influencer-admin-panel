[{"M:\\influencer-admin-panel\\src\\index.js":"1","M:\\influencer-admin-panel\\src\\App.js":"2","M:\\influencer-admin-panel\\src\\reportWebVitals.js":"3","M:\\influencer-admin-panel\\src\\redux\\store.js":"4","M:\\influencer-admin-panel\\src\\components\\privateRoute.js":"5","M:\\influencer-admin-panel\\src\\pages\\loginPage\\index.js":"6","M:\\influencer-admin-panel\\src\\pages\\adminPanelDashboard\\index.js":"7","M:\\influencer-admin-panel\\src\\redux\\reducers\\index.js":"8","M:\\influencer-admin-panel\\src\\redux\\reducers\\auth.reducer.js":"9","M:\\influencer-admin-panel\\src\\redux\\actions\\auth.actions.js":"10","M:\\influencer-admin-panel\\src\\components\\dashboardComponents\\navbar\\index.js":"11","M:\\influencer-admin-panel\\src\\components\\dashboardComponents\\sidebar\\index.js":"12","M:\\influencer-admin-panel\\src\\components\\dashboardComponents\\sidebar\\dashboardAnalytics\\index.js":"13","M:\\influencer-admin-panel\\src\\components\\chartComponents\\index.js":"14","M:\\influencer-admin-panel\\src\\components\\dashboardComponents\\sidebar\\subscriberAnalytics\\index.js":"15","M:\\influencer-admin-panel\\src\\components\\dashboardComponents\\sidebar\\influencerAnalytics\\index.js":"16","M:\\influencer-admin-panel\\src\\components\\influencerProfileComponent\\index.js":"17","M:\\influencer-admin-panel\\src\\api\\apiCalls.js":"18","M:\\influencer-admin-panel\\src\\api\\api.js":"19","M:\\influencer-admin-panel\\src\\redux\\actions\\storage.actions.js":"20","M:\\influencer-admin-panel\\src\\redux\\reducers\\storage.reducer.js":"21"},{"size":923,"mtime":1610580596474,"results":"22","hashOfConfig":"23"},{"size":686,"mtime":1611150806168,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":578,"mtime":1610580268386,"results":"26","hashOfConfig":"23"},{"size":774,"mtime":1610581378506,"results":"27","hashOfConfig":"23"},{"size":2277,"mtime":1611146431096,"results":"28","hashOfConfig":"23"},{"size":432,"mtime":1610613085062,"results":"29","hashOfConfig":"23"},{"size":259,"mtime":1611148767228,"results":"30","hashOfConfig":"23"},{"size":912,"mtime":1611640087564,"results":"31","hashOfConfig":"23"},{"size":658,"mtime":1611148181987,"results":"32","hashOfConfig":"23"},{"size":1189,"mtime":1611269405274,"results":"33","hashOfConfig":"23"},{"size":1506,"mtime":1611155506534,"results":"34","hashOfConfig":"23"},{"size":1849,"mtime":1611269345772,"results":"35","hashOfConfig":"23"},{"size":1723,"mtime":1611268820848,"results":"36","hashOfConfig":"23"},{"size":2041,"mtime":1611155555284,"results":"37","hashOfConfig":"23"},{"size":3001,"mtime":1611268906424,"results":"38","hashOfConfig":"23"},{"size":5612,"mtime":1611640347255,"results":"39","hashOfConfig":"23"},{"size":6376,"mtime":1611640247288,"results":"40","hashOfConfig":"23"},{"size":127,"mtime":1610932332913,"results":"41","hashOfConfig":"23"},{"size":1877,"mtime":1611640155803,"results":"42","hashOfConfig":"23"},{"size":660,"mtime":1611640093690,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"z9q1m0",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"M:\\influencer-admin-panel\\src\\index.js",[],["95","96"],"M:\\influencer-admin-panel\\src\\App.js",[],"M:\\influencer-admin-panel\\src\\reportWebVitals.js",[],"M:\\influencer-admin-panel\\src\\redux\\store.js",["97"],"import { applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\n\r\nimport rootReducer from \"./reducers\";\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\nexport default () => {\r\n  let store = createStore(persistedReducer, applyMiddleware(thunk));\r\n  let persistor = persistStore(store);\r\n  return { store, persistor };\r\n};\r\n","M:\\influencer-admin-panel\\src\\components\\privateRoute.js",[],"M:\\influencer-admin-panel\\src\\pages\\loginPage\\index.js",[],"M:\\influencer-admin-panel\\src\\pages\\adminPanelDashboard\\index.js",[],"M:\\influencer-admin-panel\\src\\redux\\reducers\\index.js",[],"M:\\influencer-admin-panel\\src\\redux\\reducers\\auth.reducer.js",[],"M:\\influencer-admin-panel\\src\\redux\\actions\\auth.actions.js",[],"M:\\influencer-admin-panel\\src\\components\\dashboardComponents\\navbar\\index.js",["98","99"],"import React from \"react\";\r\nimport Avatar from \"react-avatar\";\r\nimport { Form, FormControl, Nav, Navbar, NavDropdown } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./styles.css\";\r\n\r\n/**\r\n * @author\r\n * @function NavbarComponent\r\n **/\r\n\r\nconst NavbarComponent = (props) => {\r\n  const dispatch = useDispatch();\r\n  const logoutUser = () => {\r\n    dispatch({ type: \"USER_LOGOUT_SUCCESS\" });\r\n    props.history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar expand=\"lg\" className=\"navbar-main-backdrop\">\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link>\r\n              <Avatar name=\"Admin\" size=\"50\" round={true} style={{}} />\r\n            </Nav.Link>\r\n            <Nav.Link className=\"my-auto name-style\">Admin</Nav.Link>\r\n            <NavDropdown title=\"\" id=\"basic-nav-dropdown\" className=\"my-auto\">\r\n              <NavDropdown.Item onClick={logoutUser}>Logout</NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavbarComponent;\r\n","M:\\influencer-admin-panel\\src\\components\\dashboardComponents\\sidebar\\index.js",[],"M:\\influencer-admin-panel\\src\\components\\dashboardComponents\\sidebar\\dashboardAnalytics\\index.js",["100"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./styles.css\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport ChartComponent from \"../../../chartComponents\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getSubscriberData } from \"../../../../redux/actions/storage.actions\";\r\n/**\r\n * @author\r\n * @function DashboardAnalytics\r\n **/\r\n\r\nconst DashboardAnalytics = (props) => {\r\n  const [weekToShow, setWeekToShow] = useState();\r\n  const dispatch = useDispatch();\r\n  const subscriberDetails = useSelector((state) => state.storage.allSubsGained);\r\n  useEffect(() => {\r\n    dispatch(getSubscriberData());\r\n\r\n    const dates = [];\r\n    subscriberDetails?.forEach((data) => {\r\n      dates.push(new Date(data.createdAt));\r\n    });\r\n    let week = [0, 0, 0, 0, 0, 0, 0];\r\n    filterDatesByCurrentWeek(dates).forEach((e) => {\r\n      let index = e.getDay() - 1;\r\n      if (index === 0) {\r\n        index = 6;\r\n      }\r\n      week[index] = week[index] + 1;\r\n    });\r\n    setWeekToShow(week);\r\n  }, []);\r\n\r\n  const getWeekDates = () => {\r\n    let now = new Date();\r\n    let dayOfWeek = now.getDay(); //0-6\r\n    let numDay = now.getDate();\r\n\r\n    let start = new Date(now); //copy\r\n    start.setDate(numDay - dayOfWeek);\r\n    start.setHours(0, 0, 0, 0);\r\n\r\n    let end = new Date(now); //copy\r\n    end.setDate(numDay + (7 - dayOfWeek));\r\n    end.setHours(0, 0, 0, 0);\r\n\r\n    return [start, end];\r\n  };\r\n\r\n  const filterDatesByCurrentWeek = (dates) => {\r\n    let [start, end] = getWeekDates();\r\n    return dates.filter((d) => +d >= +start && +d < +end);\r\n  };\r\n  return (\r\n    <Container className=\"analytics-container-style p-2\">\r\n      <ChartComponent\r\n        title=\"Total sales\"\r\n        xAxisTitle=\"Amount($)\"\r\n        graphData={weekToShow}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DashboardAnalytics;\r\n","M:\\influencer-admin-panel\\src\\components\\chartComponents\\index.js",["101"],"import React, { useEffect, useState } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nimport \"./styles.css\";\r\nimport { Container } from \"react-bootstrap\";\r\n/**\r\n * @author\r\n * @function DashboardAnalytics\r\n **/\r\n\r\n/**\r\n * @author\r\n * @function ChartComponent\r\n **/\r\n\r\nconst ChartComponent = (props) => {\r\n  const [data, setData] = useState({});\r\n  useEffect(() => {\r\n    setData({\r\n      chart: {\r\n        backgroundColor: \"#1a1f36\",\r\n        type: \"line\",\r\n      },\r\n\r\n      title: {\r\n        style: {\r\n          color: \"#53b9ea\",\r\n          fontFamily: \"blenderProBook\",\r\n          fontSize: \"25px\",\r\n        },\r\n        text: props?.title,\r\n      },\r\n      yAxis: {\r\n        gridLineColor: \"rgba(255, 255, 255, 0.2)\",\r\n        gridLineWidth: 0.1,\r\n        className: \"highcharts-color-0\",\r\n        title: {\r\n          text: props?.xAxisTitle,\r\n        },\r\n      },\r\n      xAxis: {\r\n        gridLineWidth: 0.1,\r\n        className: \"highcharts-color-0\",\r\n        gridLineColor: \"#197F07\",\r\n        categories: [\r\n          \"Monday\",\r\n          \"Tuesday\",\r\n          \"Wednesday\",\r\n          \"Thursday\",\r\n          \"Friday\",\r\n          \"Saturday\",\r\n          \"Sunday\",\r\n        ],\r\n      },\r\n      series: [\r\n        {\r\n          name: \"Monthly\",\r\n          data: props?.graphData,\r\n          color: \"#FB49C0\",\r\n        },\r\n      ],\r\n    });\r\n  }, [props?.graphData]);\r\n\r\n  return (\r\n    <Container className=\"analytics-chart-container-style p-2\">\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={data}\r\n        containerProps={{ className: \"chart-styling\" }}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ChartComponent;\r\n",["102","103"],"M:\\influencer-admin-panel\\src\\components\\dashboardComponents\\sidebar\\subscriberAnalytics\\index.js",["104","105","106","107","108"],"import React, { useEffect, useState } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport ChartComponent from \"../../../chartComponents\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport \"./styles.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getInfluencerData } from \"../../../../redux/actions/storage.actions\";\r\n/**\r\n * @author\r\n * @function SubscriberAnalytics\r\n **/\r\nconst data = {\r\n  columns: [\r\n    {\r\n      label: \"First Name\",\r\n      field: \"fName\",\r\n      sort: \"asc\",\r\n      width: 150,\r\n    },\r\n    {\r\n      label: \"Last Name\",\r\n      field: \"lName\",\r\n      sort: \"asc\",\r\n      width: 150,\r\n    },\r\n    {\r\n      label: \"Phone\",\r\n      field: \"phone\",\r\n      sort: \"asc\",\r\n      width: 270,\r\n    },\r\n    {\r\n      label: \"Email\",\r\n      field: \"email\",\r\n      sort: \"asc\",\r\n      width: 200,\r\n    },\r\n    {\r\n      label: \"Subscribed On\",\r\n      field: \"subscribedOn\",\r\n      sort: \"asc\",\r\n      width: 100,\r\n    },\r\n  ],\r\n\r\n  rows: [],\r\n};\r\nconst SubscriberAnalytics = (props) => {\r\n  const token = useSelector((state) => state.auth.adminToken);\r\n  const [influencer, setInfluencer] = useState();\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    // for (var i = 0; i < 1; i++) {\r\n    //   data.rows.push({\r\n    //     fName: \"Max\",\r\n    //     lName: \"ver\",\r\n    //     phone: \"0900-78601\",\r\n    //     email: \"maxver@gmail.com\",\r\n    //     subscribedOn: \"2021-03-01 08:34 AM\",\r\n    //   });\r\n    // }\r\n  }, []);\r\n  return (\r\n    <Container className=\"analytics-container-style p-2\">\r\n      <ChartComponent\r\n        title=\"Total subscribers gained\"\r\n        graphData={[31, 44, 55, 11, 22, 65, 90, 231, 200]}\r\n      />\r\n      <Container className=\"table-container\">\r\n        <MDBDataTable\r\n          striped\r\n          bordered\r\n          small\r\n          hover\r\n          data={data}\r\n          clickEvent={(id) => {\r\n            console.log(\"row id = \", id);\r\n          }}\r\n        />\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SubscriberAnalytics;\r\n","M:\\influencer-admin-panel\\src\\components\\dashboardComponents\\sidebar\\influencerAnalytics\\index.js",["109"],"import React, { useEffect, useState } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport ChartComponent from \"../../../chartComponents\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getInfluencerData } from \"../../../../redux/actions/storage.actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\n/**\r\n * @author\r\n * @function InfluencerAnalytics\r\n **/\r\n\r\nconst InfluencerAnalytics = (props) => {\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"Userame\",\r\n        field: \"uName\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Instagram ID\",\r\n        field: \"instagramId\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Email\",\r\n        field: \"email\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n\r\n    rows: [],\r\n  };\r\n  const [weekToShow, setWeekToShow] = useState();\r\n  const history = useHistory();\r\n  const influencerDetails = useSelector(\r\n    (state) => state.storage.allInfluencers\r\n  );\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(getInfluencerData());\r\n    const dates = [];\r\n    influencerDetails?.forEach((data) => {\r\n      dates.push(new Date(data.createdAt));\r\n    });\r\n    let week = [0, 0, 0, 0, 0, 0, 0];\r\n    filterDatesByCurrentWeek(dates).forEach((e) => {\r\n      let index = e.getDay() - 1;\r\n      if (index === 0) {\r\n        index = 6;\r\n      }\r\n      week[index] = week[index] + 1;\r\n    });\r\n    setWeekToShow(week);\r\n  }, []);\r\n  const getWeekDates = () => {\r\n    let now = new Date();\r\n    let dayOfWeek = now.getDay(); //0-6\r\n    let numDay = now.getDate();\r\n\r\n    let start = new Date(now); //copy\r\n    start.setDate(numDay - dayOfWeek);\r\n    start.setHours(0, 0, 0, 0);\r\n\r\n    let end = new Date(now); //copy\r\n    end.setDate(numDay + (7 - dayOfWeek));\r\n    end.setHours(0, 0, 0, 0);\r\n\r\n    return [start, end];\r\n  };\r\n\r\n  const filterDatesByCurrentWeek = (dates) => {\r\n    let [start, end] = getWeekDates();\r\n    return dates.filter((d) => +d >= +start && +d < +end);\r\n  };\r\n  influencerDetails?.forEach((element) => {\r\n    data.rows.push({\r\n      clickEvent: () => {\r\n        console.log({ element });\r\n        history.push(\"/influencerprofile/\" + element.username);\r\n      },\r\n      uName: element.username,\r\n      instagramId: element.instagram_link,\r\n      email: element.email,\r\n    });\r\n  });\r\n  return (\r\n    <Container className=\"analytics-container-style p-2\">\r\n      <ChartComponent\r\n        title=\"Total influencers gained\"\r\n        xAxisTitle=\"No of People\"\r\n        graphData={weekToShow}\r\n      />\r\n      <Container className=\"table-container\">\r\n        <MDBDataTable\r\n          striped\r\n          bordered\r\n          small\r\n          hover\r\n          data={data}\r\n          clickEvent={(id) => {\r\n            console.log(\"row id = \", id);\r\n          }}\r\n        />\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InfluencerAnalytics;\r\n","M:\\influencer-admin-panel\\src\\components\\influencerProfileComponent\\index.js",["110","111"],"import React, { useEffect, useState } from \"react\";\r\nimport Avatar from \"react-avatar\";\r\nimport Switch from \"react-switch\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./styles.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getAllSubscribers,\r\n  verifyInfluencer,\r\n} from \"../../redux/actions/storage.actions\";\r\n/**\r\n * @author\r\n * @function InfluencerProfileComponent\r\n **/\r\n\r\nconst InfluencerProfileComponent = (props) => {\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"Userame\",\r\n        field: \"uName\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Instagram ID\",\r\n        field: \"instagramId\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Email\",\r\n        field: \"email\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Subscribed On\",\r\n        field: \"subscribedOn\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n    ],\r\n\r\n    rows: [],\r\n  };\r\n  const { influencerName } = useParams();\r\n  const [influencerDetails, setInfluencerDetails] = useState();\r\n  const [subscriberDetails, setSubscriberDetails] = useState();\r\n  const [verified, setVerified] = useState(false);\r\n  const allInfluencers = useSelector((state) => state.storage.allInfluencers);\r\n  const allSubscribers = useSelector((state) => state.storage.allSubscribers);\r\n  const token = useSelector((state) => state.auth.adminToken);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    allInfluencers?.forEach((element) => {\r\n      if (element.username === influencerName) {\r\n        dispatch(getAllSubscribers(token, element._id));\r\n        setInfluencerDetails(element);\r\n        setVerified(element.influencer_data.verified);\r\n      }\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    setSubscriberDetails(allSubscribers);\r\n  }, [allSubscribers]);\r\n  useEffect(() => {\r\n    influencerDetails?.influencer_data.close_friends.forEach((element) => {\r\n      console.log({ element });\r\n      data.rows.push({\r\n        uName: element.username,\r\n        instagramId: element.instagram_link,\r\n        email: element.email,\r\n      });\r\n    });\r\n  }, [influencerDetails]);\r\n\r\n  subscriberDetails?.forEach((element) => {\r\n    console.log({ element });\r\n    data.rows.push({\r\n      uName: element.subscriber_id.username,\r\n      instagramId: element.subscriber_id.instagram_link,\r\n      email: element.subscriber_id.email,\r\n      subscribedOn: element.updatedAt,\r\n    });\r\n  });\r\n\r\n  console.log({ influencerDetails });\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex flex-row\">\r\n        <Container\r\n          fluid\r\n          className=\"financial-details-style mt-5 p-2 d-flex flex-column\"\r\n        >\r\n          <Avatar\r\n            name={influencerName}\r\n            size=\"80\"\r\n            round={true}\r\n            src={influencerDetails?.influencer_data.image}\r\n          />\r\n          <div className=\"d-flex flex-row p-2 w-100 mt-2\">\r\n            <p className=\"account-balance-style mr-auto my-auto\">\r\n              Influencer Name:\r\n            </p>\r\n            <p className=\"account-balance-style my-auto\">\r\n              {influencerDetails?.username}\r\n            </p>\r\n          </div>\r\n          <div className=\"d-flex flex-row p-2 w-100 mt-2\">\r\n            <p className=\"account-balance-style mr-auto my-auto\">\r\n              Profile Status:\r\n            </p>\r\n            <Switch\r\n              onChange={() => {\r\n                if (verified) {\r\n                  alert(\"user is already verified\");\r\n                } else {\r\n                  dispatch(\r\n                    verifyInfluencer(token, influencerDetails._id, true)\r\n                  );\r\n                  setVerified(!verified);\r\n                }\r\n              }}\r\n              checked={verified}\r\n              onColor=\"#53b9ea\"\r\n            />\r\n          </div>\r\n          <div className=\"solid-line\"></div>\r\n          <div className=\"d-flex flex-row p-2 w-100\">\r\n            <p className=\"account-balance-style mr-auto my-auto\">\r\n              Total Subscriber count:\r\n            </p>\r\n            <p className=\"account-balance-style my-auto\">\r\n              {subscriberDetails?.length}\r\n            </p>\r\n          </div>\r\n        </Container>\r\n\r\n        {/* for future use */}\r\n        {/* <Container className=\"financial-details-style mt-5 d-flex flex-column\">\r\n          <div className=\"d-flex flex-row p-2 w-100\">\r\n            <p className=\"account-balance-style mr-auto\">Account Balance:</p>\r\n            <p className=\"account-balance-style\">\r\n              $ {influencerDetails?.influencer_data.balance}\r\n            </p>\r\n          </div>\r\n          <div className=\"d-flex flex-row p-2 w-100\">\r\n            <p className=\"account-balance-style mr-auto\">Growth Rate:</p>\r\n            <p className=\"account-balance-style\">132%</p>\r\n          </div>\r\n\r\n          <div className=\"solid-line\"></div>\r\n          <div className=\"d-flex flex-row p-2 w-100\">\r\n            <p className=\"account-balance-style mr-auto\">Total Earnings:</p>\r\n            <p className=\"account-balance-style\">$4200</p>\r\n          </div>\r\n        </Container> */}\r\n      </div>\r\n      <Container className=\"table-container mt-5\">\r\n        <MDBDataTable\r\n          striped\r\n          bordered\r\n          small\r\n          hover\r\n          data={data}\r\n          clickEvent={(id) => {\r\n            console.log(\"row id = \", id);\r\n          }}\r\n        />\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfluencerProfileComponent;\r\n","M:\\influencer-admin-panel\\src\\api\\apiCalls.js",[],"M:\\influencer-admin-panel\\src\\api\\api.js",[],"M:\\influencer-admin-panel\\src\\redux\\actions\\storage.actions.js",[],"M:\\influencer-admin-panel\\src\\redux\\reducers\\storage.reducer.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":13,"column":1,"nodeType":"118","endLine":17,"endColumn":3},{"ruleId":"119","severity":1,"message":"120","line":3,"column":10,"nodeType":"121","messageId":"122","endLine":3,"endColumn":14},{"ruleId":"119","severity":1,"message":"123","line":3,"column":16,"nodeType":"121","messageId":"122","endLine":3,"endColumn":27},{"ruleId":"124","severity":1,"message":"125","line":33,"column":6,"nodeType":"126","endLine":33,"endColumn":8,"suggestions":"127"},{"ruleId":"124","severity":1,"message":"128","line":64,"column":6,"nodeType":"126","endLine":64,"endColumn":24,"suggestions":"129"},{"ruleId":"112","replacedBy":"130"},{"ruleId":"114","replacedBy":"131"},{"ruleId":"119","severity":1,"message":"132","line":7,"column":10,"nodeType":"121","messageId":"122","endLine":7,"endColumn":27},{"ruleId":"119","severity":1,"message":"133","line":49,"column":9,"nodeType":"121","messageId":"122","endLine":49,"endColumn":14},{"ruleId":"119","severity":1,"message":"134","line":50,"column":10,"nodeType":"121","messageId":"122","endLine":50,"endColumn":20},{"ruleId":"119","severity":1,"message":"135","line":50,"column":22,"nodeType":"121","messageId":"122","endLine":50,"endColumn":35},{"ruleId":"119","severity":1,"message":"136","line":51,"column":9,"nodeType":"121","messageId":"122","endLine":51,"endColumn":17},{"ruleId":"124","severity":1,"message":"137","line":59,"column":6,"nodeType":"126","endLine":59,"endColumn":8,"suggestions":"138"},{"ruleId":"124","severity":1,"message":"139","line":65,"column":6,"nodeType":"126","endLine":65,"endColumn":8,"suggestions":"140"},{"ruleId":"124","severity":1,"message":"141","line":78,"column":6,"nodeType":"126","endLine":78,"endColumn":25,"suggestions":"142"},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'FormControl' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'filterDatesByCurrentWeek', and 'subscriberDetails'. Either include them or remove the dependency array.","ArrayExpression",["145"],"React Hook useEffect has missing dependencies: 'props?.title' and 'props?.xAxisTitle'. Either include them or remove the dependency array. If 'setData' needs the current value of 'props.title', you can also switch to useReducer instead of useState and read 'props.title' in the reducer.",["146"],["143"],["144"],"'getInfluencerData' is defined but never used.","'token' is assigned a value but never used.","'influencer' is assigned a value but never used.","'setInfluencer' is assigned a value but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'filterDatesByCurrentWeek', and 'influencerDetails'. Either include them or remove the dependency array.",["147"],"React Hook useEffect has missing dependencies: 'allInfluencers', 'dispatch', 'influencerName', and 'token'. Either include them or remove the dependency array.",["148"],"React Hook useEffect has a missing dependency: 'data.rows'. Either include it or remove the dependency array.",["149"],"no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [dispatch, filterDatesByCurrentWeek, subscriberDetails]",{"range":"160","text":"161"},"Update the dependencies array to be: [props?.graphData, props?.title, props?.xAxisTitle]",{"range":"162","text":"163"},"Update the dependencies array to be: [dispatch, filterDatesByCurrentWeek, influencerDetails]",{"range":"164","text":"165"},"Update the dependencies array to be: [allInfluencers, dispatch, influencerName, token]",{"range":"166","text":"167"},"Update the dependencies array to be: [data.rows, influencerDetails]",{"range":"168","text":"169"},[1026,1028],"[dispatch, filterDatesByCurrentWeek, subscriberDetails]",[1412,1430],"[props?.graphData, props?.title, props?.xAxisTitle]",[1550,1552],"[dispatch, filterDatesByCurrentWeek, influencerDetails]",[1875,1877],"[allInfluencers, dispatch, influencerName, token]",[2261,2280],"[data.rows, influencerDetails]"]